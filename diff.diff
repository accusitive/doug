diff --git a/src/main/java/net/fabricmc/example/Client.java b/src/main/java/net/fabricmc/example/Client.java
index 84d1417..d256a6f 100644
--- a/src/main/java/net/fabricmc/example/Client.java
+++ b/src/main/java/net/fabricmc/example/Client.java
@@ -46,13 +46,21 @@ public class Client {
     }
 
     public void keyPress(int key) {
-        if (utilities != null && MinecraftClient.getInstance().currentScreen == null) {
+        MinecraftClient mc = MinecraftClient.getInstance();
+        if (utilities != null && mc.currentScreen == null) {
             for (Utility u : this.utilities.values()) {
                 if (key == u.bind) {
                     u.toggle();
                 }
             }
+        }else if(mc.currentScreen instanceof ClickguiScreen){
+            ClickguiScreen cgs = (ClickguiScreen) mc.currentScreen;
+            for(CategoryComponent cg : cgs.categoryComponents) {
+                cg.keyPress(key);
+            }
         }
+
+        
     }
 
     public void render(MatrixStack matrices, float tickDelta) {
@@ -60,7 +68,16 @@ public class Client {
             utilities.values().stream().filter(u -> u.state).forEach(u -> u.render(matrices, tickDelta));
         }
     }
-
+    public void onPreMotionUpdate(){
+        if (utilities != null) {
+            utilities.values().stream().filter(u -> u.state).forEach(u -> u.onPreMotionUpdate());
+        }
+    }
+    public void onPostMotionUpdate(){
+        if (utilities != null) {
+            utilities.values().stream().filter(u -> u.state).forEach(u -> u.onPostMotionUpdate());
+        }
+    }
     public HashMap<String, Utility> utilities() {
         return this.utilities;
     }
diff --git a/src/main/java/net/fabricmc/example/Utility.java b/src/main/java/net/fabricmc/example/Utility.java
index b9c5875..90c61d0 100644
--- a/src/main/java/net/fabricmc/example/Utility.java
+++ b/src/main/java/net/fabricmc/example/Utility.java
@@ -4,6 +4,7 @@ import java.util.HashMap;
 
 import org.lwjgl.glfw.GLFW;
 
+import net.fabricmc.example.value.BoolValue;
 import net.fabricmc.example.value.Value;
 import net.minecraft.client.util.math.MatrixStack;
 
@@ -12,7 +13,7 @@ public class Utility {
     public int bind;
     public Boolean state;
     public Category category;
-
+    public HashMap<String, Value> settings;
     public enum Category {
         Combat, Render, Movement, Player
     }
@@ -22,6 +23,7 @@ public class Utility {
         this.bind = bind;
         this.state = false;
         this.category = category;
+        this.settings = new HashMap<>();
     }
 
     public void init() {
@@ -37,7 +39,7 @@ public class Utility {
     }
 
     public HashMap<String, Value> getSettings() {
-        return new HashMap<>();
+        return settings;
     }
 
     public Boolean enabled() {
@@ -53,7 +55,6 @@ public class Utility {
     }
 
     public void toggle() {
-        System.out.printf("Module %s toggled.", this.name);
         if (this.enabled()) {
             this.state = false;
             this.onDisable();
@@ -79,4 +80,11 @@ public class Utility {
     public Category category() {
         return this.category;
     }
+
+	public void onPreMotionUpdate() {
+	}
+
+	public void onPostMotionUpdate() {
+    }
+    
 }
diff --git a/src/main/java/net/fabricmc/example/clickgui/component/CategoryComponent.java b/src/main/java/net/fabricmc/example/clickgui/component/CategoryComponent.java
index 14a4dfa..51b07cd 100644
--- a/src/main/java/net/fabricmc/example/clickgui/component/CategoryComponent.java
+++ b/src/main/java/net/fabricmc/example/clickgui/component/CategoryComponent.java
@@ -75,6 +75,8 @@ public class CategoryComponent extends Component {
         super.render(matrixStack, mouseX, mouseY);
     }
 
+
+
     public void mousePress(int button, int action) {
         if (this.hovered(this.mouseX, this.mouseY)) {
             if (button == GLFW.GLFW_MOUSE_BUTTON_RIGHT && action == GLFW.GLFW_PRESS) {
@@ -106,4 +108,10 @@ public class CategoryComponent extends Component {
         return temp;
     }
 
+	public void keyPress(int key) {
+        for(ModuleComponent mc : this.moduleComponents) {
+            mc.keyPress(key);
+        } 
+	}
+
 }
diff --git a/src/main/java/net/fabricmc/example/clickgui/component/Component.java b/src/main/java/net/fabricmc/example/clickgui/component/Component.java
index e64538e..5a62bdc 100644
--- a/src/main/java/net/fabricmc/example/clickgui/component/Component.java
+++ b/src/main/java/net/fabricmc/example/clickgui/component/Component.java
@@ -9,14 +9,10 @@ public class Component {
     int height;
     public void render(MatrixStack matrixStack, int mouseX, int mouseY){
 
-    }
-    public void onDrag(int mouseX, int mouseY){
-
     }
     public boolean xHovered(int mouseX){
         boolean xHovered = mouseX > this.x && mouseX < this.x + this.width;
         return xHovered;
-
     }
     public boolean yHovered(int mouseY){
         boolean yHovered = mouseY > this.y && mouseY < this.y + this.height;
diff --git a/src/main/java/net/fabricmc/example/clickgui/component/ModeComponent.java b/src/main/java/net/fabricmc/example/clickgui/component/ModeComponent.java
index c7338b7..26fefd8 100644
--- a/src/main/java/net/fabricmc/example/clickgui/component/ModeComponent.java
+++ b/src/main/java/net/fabricmc/example/clickgui/component/ModeComponent.java
@@ -3,25 +3,29 @@ package net.fabricmc.example.clickgui.component;
 import org.lwjgl.glfw.GLFW;
 
 import net.fabricmc.example.Client;
+import net.fabricmc.example.RenderUtils;
 import net.fabricmc.example.value.ModeValue;
 import net.minecraft.client.MinecraftClient;
 import net.minecraft.client.gui.DrawableHelper;
 import net.minecraft.client.util.math.MatrixStack;
 
-public class ModeComponent extends Component{
+public class ModeComponent extends Component {
     String tag;
     ModeValue mode;
     int mouseX, mouseY;
+
     public ModeComponent(int x, int y) {
         super(x, y, 140, 14);
     }
 
-	public void setMode(ModeValue mode) {
+    public void setMode(ModeValue mode) {
         this.mode = mode;
     }
+
     public void setTag(String t) {
         this.tag = t;
     }
+
     @Override
     public void render(MatrixStack matrixStack, int mouseX, int mouseY) {
         this.mouseX = mouseX;
@@ -29,17 +33,19 @@ public class ModeComponent extends Component{
 
         MinecraftClient mc = MinecraftClient.getInstance();
         boolean enabled = this.mode.current() == this.tag;
-        DrawableHelper.fill(matrixStack, this.x, this.y, this.x + this.width, this.y + this.height(), this.hovered(mouseX, mouseY) ? Client.panelSelectedColor() : Client.panelColor());
-        DrawableHelper.drawStringWithShadow(matrixStack, mc.textRenderer, this.tag, this.x + 4, this.y + 4, enabled ? 0x8038a9ff : Client.panelText());
+        RenderUtils.drawBorderedRectHori(matrixStack, this.x+1, this.y, this.x + this.width, this.y + this.height(), 1,
+                this.hovered(mouseX, mouseY) ? Client.panelSelectedColor() : Client.panelColor(), -1);
+        DrawableHelper.drawStringWithShadow(matrixStack, mc.textRenderer, this.tag, this.x + 4, this.y + 4,
+                enabled ? Client.mainColor() : Client.panelText());
         super.render(matrixStack, mouseX, mouseY);
     }
 
-	public void mousePress(int button, int action) {
-        if(this.hovered(mouseX, mouseY)) {
-            if(button ==  GLFW.GLFW_MOUSE_BUTTON_LEFT) {
+    public void mousePress(int button, int action) {
+        if (this.hovered(mouseX, mouseY)) {
+            if (button == GLFW.GLFW_MOUSE_BUTTON_LEFT) {
                 this.mode.set(this.mode.tags().indexOf(this.tag));
             }
         }
-	}
-    
+    }
+
 }
diff --git a/src/main/java/net/fabricmc/example/clickgui/component/ModuleComponent.java b/src/main/java/net/fabricmc/example/clickgui/component/ModuleComponent.java
index 6649cac..b774084 100644
--- a/src/main/java/net/fabricmc/example/clickgui/component/ModuleComponent.java
+++ b/src/main/java/net/fabricmc/example/clickgui/component/ModuleComponent.java
@@ -17,6 +17,7 @@ public class ModuleComponent extends Component {
     public Utility utility;
     private boolean open = false;
     private int mouseX, mouseY;
+    private boolean listening = false;
 
     CategoryComponent parent;
     public ArrayList<OptionComponent> optionComponents;
@@ -49,17 +50,13 @@ public class ModuleComponent extends Component {
     public void render(MatrixStack matrixStack, int mouseX, int mouseY) {
         this.mouseX = mouseX;
         this.mouseY = mouseY;
-        
+
         MinecraftClient mc = MinecraftClient.getInstance();
-        if(!this.open) {
-            RenderUtils.drawBorderedRect(matrixStack, this.x, this.y, this.x + this.width, this.y + this.height(), 1, hovered(mouseX, mouseY) ? Client.panelSelectedColor() : Client.panelColor(), -1);
-        } else {
-        RenderUtils.drawBorderedLeft(matrixStack, this.x, this.y, this.x + this.width, this.y + this.height(), 1,
+        RenderUtils.drawBorderedRectHori(matrixStack, this.x, this.y, this.x + this.width, this.y + this.height(), 1,
                 hovered(mouseX, mouseY) ? Client.panelSelectedColor() : Client.panelColor(), -1);
-
-        }
-        // DrawableHelper.fill(matrixStack, this.x, this.y, this.x + width, this.y + this.height(),
-        //         hovered(mouseX, mouseY) ? Client.panelSelectedColor() : Client.panelColor());
+        // DrawableHelper.fill(matrixStack, this.x, this.y, this.x + width, this.y +
+        // this.height(),
+        // hovered(mouseX, mouseY) ? Client.panelSelectedColor() : Client.panelColor());
         mc.inGameHud.getFontRenderer().drawWithShadow(matrixStack, utility.getName(), this.x + 4, this.y + 4,
                 utility.enabled() ? Client.mainColor() : -1);
         if (this.optionComponents.size() != 0) {
@@ -86,14 +83,20 @@ public class ModuleComponent extends Component {
                 }
             } else if (button == GLFW.GLFW_MOUSE_BUTTON_RIGHT) {
                 if (action == GLFW.GLFW_PRESS) {
-                    boolean before = this.open;
-                    for (ModuleComponent mc : this.parent.moduleComponents) {
-                        for (OptionComponent oc : mc.optionComponents) {
-                            oc.parent.open = false;
+                    if (this.utility.settings.size() > 0) {
+                        boolean before = this.open;
+                        for (ModuleComponent mc : this.parent.moduleComponents) {
+                            for (OptionComponent oc : mc.optionComponents) {
+                                oc.parent.open = false;
+                            }
                         }
-                    }
 
-                    this.open = !before;
+                        this.open = !before;
+                    }
+                }
+            } else if (button == GLFW.GLFW_MOUSE_BUTTON_MIDDLE) {
+                if (action == GLFW.GLFW_PRESS) {
+                    this.listening = true;
                 }
             }
         }
@@ -101,4 +104,13 @@ public class ModuleComponent extends Component {
             oc.mousePress(button, action);
         }
     }
+
+	public void keyPress(int key) {
+        if(this.listening) {
+            if(key != GLFW.GLFW_KEY_SPACE) {
+                this.utility.bind = key;
+            }
+            this.listening = false;
+        }
+	}
 }
diff --git a/src/main/java/net/fabricmc/example/clickgui/component/OptionComponent.java b/src/main/java/net/fabricmc/example/clickgui/component/OptionComponent.java
index fa4871a..4e24b28 100644
--- a/src/main/java/net/fabricmc/example/clickgui/component/OptionComponent.java
+++ b/src/main/java/net/fabricmc/example/clickgui/component/OptionComponent.java
@@ -8,7 +8,8 @@ import net.fabricmc.example.value.BoolValue;
 import net.fabricmc.example.Client;
 import net.fabricmc.example.RenderUtils;
 import net.fabricmc.example.value.ModeValue;
-import net.fabricmc.example.value.NumberValue;
+import net.fabricmc.example.value.FloatValue;
+import net.fabricmc.example.value.IntValue;
 import net.fabricmc.example.value.Value;
 import net.minecraft.client.MinecraftClient;
 import net.minecraft.client.font.TextRenderer;
@@ -49,7 +50,7 @@ public class OptionComponent extends Component {
         this.mouseY = mouseY;
         MinecraftClient mc = MinecraftClient.getInstance();
         TextRenderer fr = mc.inGameHud.getFontRenderer();
-        RenderUtils.drawBorderedRect(matrixStack, this.x + 1, this.y, this.x + this.width,
+        RenderUtils.drawBorderedRectHori(matrixStack, this.x + 1, this.y, this.x + this.width,
                 this.y + this.height(), 1, Client.panelColor(), -1);
         // DrawableHelper.fill(matrixStack, this.x, this.y, this.x + width, this.y +
         // this.height(),
@@ -60,23 +61,34 @@ public class OptionComponent extends Component {
             int w = fr.getWidth(s);
             DrawableHelper.fill(matrixStack, this.x, this.y, this.x + this.width, this.y + this.height(), boolValue.get() ? 0xff009900 : 0xff990000);
             fr.drawWithShadow(matrixStack, s, (this.x + (this.width - w) / 2), this.y + 3, -1);
-        } else if (this.val instanceof NumberValue) {
-            NumberValue numValue = (NumberValue) this.val;
+        } else if (this.val instanceof FloatValue) {
+            FloatValue numValue = (FloatValue) this.val;
 
             String s = String.format("%s: %.1f", this.valname, numValue.get());
             int w = fr.getWidth(s);
             float zidth = map(numValue.get(), numValue.min(), numValue.max(), 0, this.width);
             DrawableHelper.fill(matrixStack, this.x, this.y, this.x + (int) zidth, this.y + height, Client.mainColor());
-            matrixStack.push();
-            matrixStack.scale(0.80000f, 0.80000f, 0.80000f);
-            fr.drawWithShadow(matrixStack, s, (this.x + (this.width - w) / 2) * 1.25f, (this.y + 3) * 1.25f, -1);
-            matrixStack.pop();
+            fr.drawWithShadow(matrixStack, s, (this.x + (this.width - w) / 2), (this.y + 3), -1);
+
+            if (hovered(mouseX, mouseY)) {
+                if (GLFW.glfwGetMouseButton(mc.getWindow().getHandle(), GLFW.GLFW_MOUSE_BUTTON_LEFT) == 1) {
+                    float num = map(this.mouseX, this.x, this.x + this.width, numValue.min() - 0.1f, numValue.max() + 0.1f);
+                    numValue.set(num);
+                }
+            }
+        } else if (this.val instanceof IntValue) {
+            IntValue intValue = (IntValue) this.val;
+
+            String s = String.format("%s: %s", this.valname, intValue.get());
+            int w = fr.getWidth(s);
+            float zidth = map(intValue.get(), intValue.min(), intValue.max(), 0, this.width);
+            DrawableHelper.fill(matrixStack, this.x, this.y, this.x + (int) zidth, this.y + height, Client.mainColor());
+            fr.drawWithShadow(matrixStack, s, (this.x + (this.width - w) / 2), (this.y + 3), -1);
 
             if (hovered(mouseX, mouseY)) {
                 if (GLFW.glfwGetMouseButton(mc.getWindow().getHandle(), GLFW.GLFW_MOUSE_BUTTON_LEFT) == 1) {
-                    NumberValue nv = (NumberValue) this.val;
-                    float num = map(this.mouseX, this.x, this.x + this.width, nv.min() - 0.1f, nv.max() + 0.1f);
-                    nv.set(num);
+                    int num = (int) map(this.mouseX, this.x, this.x + this.width, intValue.min()-3, intValue.max()+3);
+                    intValue.set(num);
                 }
             }
         } else if (this.val instanceof ModeValue) {
diff --git a/src/main/java/net/fabricmc/example/mixin/LivingEntityRendererMixin.java b/src/main/java/net/fabricmc/example/mixin/LivingEntityRendererMixin.java
index b09626d..a0baa70 100644
--- a/src/main/java/net/fabricmc/example/mixin/LivingEntityRendererMixin.java
+++ b/src/main/java/net/fabricmc/example/mixin/LivingEntityRendererMixin.java
@@ -9,7 +9,6 @@ import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
 import org.spongepowered.asm.mixin.injection.At;
 
 import net.fabricmc.example.DougMod;
-import net.minecraft.client.MinecraftClient;
 import net.minecraft.client.render.VertexConsumerProvider;
 import net.minecraft.client.render.entity.LivingEntityRenderer;
 import net.minecraft.client.util.math.MatrixStack;
diff --git a/src/main/java/net/fabricmc/example/mixin/MousePressMixin.java b/src/main/java/net/fabricmc/example/mixin/MousePressMixin.java
index 31df09c..8a5e440 100644
--- a/src/main/java/net/fabricmc/example/mixin/MousePressMixin.java
+++ b/src/main/java/net/fabricmc/example/mixin/MousePressMixin.java
@@ -15,7 +15,6 @@ public class MousePressMixin {
     @Inject(at = @At("HEAD"), method = "onMouseButton(JIII)V")
     public void onMouseButton(long window, int key, int action, int mods, CallbackInfo info){
         if(action == GLFW.GLFW_PRESS) {
-            System.out.println("Press");
             DougMod.client.mousePress(key, action);
         }
     }
diff --git a/src/main/java/net/fabricmc/example/utilities/AutoLoot.java b/src/main/java/net/fabricmc/example/utilities/AutoLoot.java
index 3eabce8..ac48315 100644
--- a/src/main/java/net/fabricmc/example/utilities/AutoLoot.java
+++ b/src/main/java/net/fabricmc/example/utilities/AutoLoot.java
@@ -1,7 +1,6 @@
 package net.fabricmc.example.utilities;
 
 import java.util.HashMap;
-import java.util.Vector;
 
 import org.lwjgl.glfw.GLFW;
 // import org.lwjgl.util.vector.Matrix3f;
@@ -9,35 +8,16 @@ import org.lwjgl.glfw.GLFW;
 // import org.lwjgl.util.vector.Vector3f;
 
 import net.fabricmc.example.Utility;
-import net.fabricmc.example.value.BoolValue;
-import net.fabricmc.example.value.ModeValue;
-import net.fabricmc.example.value.NumberValue;
 import net.fabricmc.example.value.Value;
-import net.fabricmc.fabric.api.event.client.player.ClientPickBlockCallback.Container;
 import net.minecraft.client.MinecraftClient;
-import net.minecraft.client.gui.DrawableHelper;
-import net.minecraft.client.gui.screen.Screen;
 import net.minecraft.client.gui.screen.ingame.GenericContainerScreen;
 import net.minecraft.client.util.math.MatrixStack;
-import net.minecraft.client.util.math.Vector3d;
-import net.minecraft.client.util.math.Vector3f;
-import net.minecraft.entity.Entity;
-import net.minecraft.entity.passive.VillagerEntity;
-import net.minecraft.entity.player.PlayerEntity;
-import net.minecraft.item.Item;
-import net.minecraft.item.ItemGroup;
 import net.minecraft.item.Items;
 import net.minecraft.network.packet.c2s.play.ClickSlotC2SPacket;
 import net.minecraft.screen.slot.Slot;
 import net.minecraft.screen.slot.SlotActionType;
-import net.minecraft.util.math.BlockPos;
-import net.minecraft.util.math.MathHelper;
-import net.minecraft.util.math.Matrix4f;
-import net.minecraft.util.math.Vec2f;
-import net.minecraft.util.math.Vec3d;
 
 public class AutoLoot extends Utility {
-    HashMap<String, Value> settings = new HashMap<>();
 
     public AutoLoot() {
         super("AutoLoot", GLFW.GLFW_KEY_GRAVE_ACCENT, Category.Player);
@@ -85,10 +65,6 @@ public class AutoLoot extends Utility {
         super.tick();
     }
 
-    @Override
-    public HashMap<String, Value> getSettings() {
-        return settings;
-    }
 }
 
 /*
diff --git a/src/main/java/net/fabricmc/example/utilities/AutoSprint.java b/src/main/java/net/fabricmc/example/utilities/AutoSprint.java
index 55b3135..5169a1a 100644
--- a/src/main/java/net/fabricmc/example/utilities/AutoSprint.java
+++ b/src/main/java/net/fabricmc/example/utilities/AutoSprint.java
@@ -10,7 +10,6 @@ import net.fabricmc.example.value.Value;
 import net.minecraft.client.MinecraftClient;
 
 public class AutoSprint extends Utility {
-    HashMap<String, Value> settings = new HashMap<>();
 
     public AutoSprint() {
         super("Sprint", GLFW.GLFW_KEY_P, Category.Movement);
@@ -20,7 +19,7 @@ public class AutoSprint extends Utility {
     }
 
     @Override
-    public void tick() {
+    public void onPreMotionUpdate() {
         MinecraftClient mc = MinecraftClient.getInstance();
         boolean omni = ((BoolValue) this.getSettings().get("Omni")).get();
         if (!omni) {
@@ -33,9 +32,4 @@ public class AutoSprint extends Utility {
         super.tick();
     }
 
-    @Override
-    public HashMap<String, Value> getSettings() {
-
-        return settings;
-    }
 }
diff --git a/src/main/java/net/fabricmc/example/utilities/Clickgui.java b/src/main/java/net/fabricmc/example/utilities/Clickgui.java
index 2751a0d..cbd8b0a 100644
--- a/src/main/java/net/fabricmc/example/utilities/Clickgui.java
+++ b/src/main/java/net/fabricmc/example/utilities/Clickgui.java
@@ -1,25 +1,38 @@
 package net.fabricmc.example.utilities;
 
+import java.util.HashMap;
 
 import org.lwjgl.glfw.GLFW;
 
 import net.fabricmc.example.DougMod;
 import net.fabricmc.example.Utility;
 import net.fabricmc.example.clickgui.ClickguiScreen;
+import net.fabricmc.example.value.BoolValue;
 import net.minecraft.client.MinecraftClient;
 
 public class Clickgui extends Utility {
     public Clickgui() {
         super("Clickgui", GLFW.GLFW_KEY_RIGHT_SHIFT, Category.Render);
+        this.settings.put("Debug_Save", new BoolValue(true));
     }
 
     @Override
     public void onEnable() {
         MinecraftClient mc = MinecraftClient.getInstance();
-        // if(DougMod.client.getClickguiScreen() == null) {
+        if (this.settings.containsKey("Debug_Save") && ((BoolValue) this.settings.get("Debug_Save")).get()) {
             DougMod.client.setClickguiScreen(new ClickguiScreen());
-        // }
+        } else {
+            if (DougMod.client.getClickguiScreen() == null) {
+                DougMod.client.setClickguiScreen(new ClickguiScreen());
+            }
+        }
         mc.openScreen(DougMod.client.getClickguiScreen());
+        // if(((BoolValue)this.settings.get("Debug_Save")).get()) {
+
+        // }
+        // if(DougMod.client.getClickguiScreen() == null) {
+        // DougMod.client.setClickguiScreen(new ClickguiScreen());
+        // }
         this.toggle();
         super.onEnable();
     }
diff --git a/src/main/java/net/fabricmc/example/utilities/Flight.java b/src/main/java/net/fabricmc/example/utilities/Flight.java
index 1058877..f91d262 100644
--- a/src/main/java/net/fabricmc/example/utilities/Flight.java
+++ b/src/main/java/net/fabricmc/example/utilities/Flight.java
@@ -5,28 +5,15 @@ import java.util.HashMap;
 import org.lwjgl.glfw.GLFW;
 
 import net.fabricmc.example.Utility;
-import net.fabricmc.example.value.NumberValue;
+import net.fabricmc.example.value.FloatValue;
 import net.fabricmc.example.value.Value;
-import net.minecraft.block.BlockState;
 import net.minecraft.client.MinecraftClient;
-import net.minecraft.data.client.model.BlockStateSupplier;
-import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
-import net.minecraft.network.packet.s2c.play.PlayerPositionLookS2CPacket;
-import net.minecraft.util.hit.HitResult;
-import net.minecraft.util.math.BlockPos;
-import net.minecraft.util.math.MathHelper;
-import net.minecraft.util.math.Vec2f;
-import net.minecraft.util.math.Vec3d;
-import net.minecraft.util.shape.VoxelShape;
-import net.minecraft.util.shape.VoxelShapes;
-import net.minecraft.world.gen.stateprovider.BlockStateProvider;
 
 public class Flight extends Utility {
-    HashMap<String, Value> settings = new HashMap<>();
 
     public Flight() {
         super("Flight", GLFW.GLFW_KEY_G, Category.Movement);
-        this.settings.put("Speed", new NumberValue(5, 1, 10));
+        this.settings.put("Speed", new FloatValue(5, 1, 10));
     }
     @Override
     public void tick() {
@@ -43,8 +30,4 @@ public class Flight extends Utility {
 
         super.onDisable();
     }
-    @Override
-    public HashMap<String, Value> getSettings() {
-        return settings;
-    }
 }
diff --git a/src/main/java/net/fabricmc/example/utilities/Fullbright.java b/src/main/java/net/fabricmc/example/utilities/Fullbright.java
index 047b6c8..2ddc50d 100644
--- a/src/main/java/net/fabricmc/example/utilities/Fullbright.java
+++ b/src/main/java/net/fabricmc/example/utilities/Fullbright.java
@@ -4,7 +4,6 @@ import net.fabricmc.example.IMinecraftClient;
 import net.fabricmc.example.Utility;
 import net.minecraft.client.MinecraftClient;
 import net.minecraft.client.util.Session;
-import net.minecraft.client.util.Session.AccountType;
 
 public class Fullbright extends Utility {
 
diff --git a/src/main/java/net/fabricmc/example/utilities/Hud.java b/src/main/java/net/fabricmc/example/utilities/Hud.java
index b455178..2ef3bd9 100644
--- a/src/main/java/net/fabricmc/example/utilities/Hud.java
+++ b/src/main/java/net/fabricmc/example/utilities/Hud.java
@@ -6,9 +6,6 @@ import java.util.Comparator;
 import java.util.HashMap;
 import java.util.List;
 
-import com.mojang.blaze3d.platform.FramebufferInfo;
-import com.mojang.blaze3d.platform.GlStateManager;
-import com.mojang.blaze3d.systems.RenderSystem;
 
 import org.lwjgl.glfw.GLFW;
 
@@ -21,20 +18,11 @@ import net.fabricmc.example.value.Value;
 import net.minecraft.client.MinecraftClient;
 import net.minecraft.client.font.TextRenderer;
 import net.minecraft.client.gui.DrawableHelper;
-import net.minecraft.client.gui.screen.Screen;
-import net.minecraft.client.gui.screen.TitleScreen;
-import net.minecraft.client.render.BufferBuilder;
-import net.minecraft.client.render.BufferRenderer;
-import net.minecraft.client.render.Tessellator;
-import net.minecraft.client.render.VertexFormat;
-import net.minecraft.client.render.VertexFormats;
 import net.minecraft.client.util.math.MatrixStack;
-import net.minecraft.command.argument.BrigadierArgumentTypes;
-import net.minecraft.util.math.MathHelper;
 
 public class Hud extends Utility {
     List<Utility> sortedUtilities = new ArrayList<>();
-    HashMap<String, Value> settings = new HashMap<>();
+    // HashMap<String, Value> settings = new HashMap<>();
 
     public Hud() {
         super("Hud", GLFW.GLFW_KEY_MINUS, Category.Render);
@@ -58,16 +46,13 @@ public class Hud extends Utility {
 
         TextRenderer fr = mc.inGameHud.getFontRenderer();
         int width = mc.getWindow().getScaledWidth();
-        int height = mc.getWindow().getScaledHeight();
+        // int height = mc.getWindow().getScaledHeight();
         int y = 0;
-        // matrices.scale(4, 4, 4);
         RenderUtils.drawBorderedRectHori(matrices, 4, 4, 90, 20, 2, Client.panelColor(), -1);
-        DrawableHelper.drawCenteredString(matrices, fr, "Doug", 45, 8, -1);
-        // fr.draw(matrices, "Doug", 16, 8, -1);
-        // matrices.scale(0.25f, 0.25f, 0.25f);
+        DrawableHelper.drawCenteredString(matrices, fr, "Doug b1", 45, 8, Client.mainColor());
         if (((BoolValue) this.settings.get("ShowFps")).get()) {
             fr.drawWithShadow(matrices, String.format("FPS: %s", mc.fpsDebugString.split(" ")[0]), 1, fr.fontHeight * 5,
-                    0x00ff00);
+                    Client.mainColor());
         }
         // Arraylist
         int lastNameWidth = 0;
@@ -165,14 +150,14 @@ public class Hud extends Utility {
     public Boolean enabled() {
         ArrayList<Utility> utils = new ArrayList<Utility>(DougMod.client.utilities().values());
         MinecraftClient mc = MinecraftClient.getInstance();
-        // TextRenderer fr = mc.textRenderer;
+        TextRenderer fr = mc.textRenderer;
         Collections.sort(utils, new Comparator<Utility>() {
             @Override
             public int compare(Utility arg0, Utility arg1) {
-                // int width = fr.getWidth(arg0.getName());
-                // int otherWidth = fr.getWidth(arg1.getName());
-                int width = arg0.getName().length();
-                int otherWidth = arg1.getName().length();
+                int width = fr.getWidth(arg0.getName());
+                int otherWidth = fr.getWidth(arg1.getName());
+                // int width = arg0.getName().length();
+                // int otherWidth = arg1.getName().length();
                 if (width < otherWidth) {
                     return 1;
                 } else {
@@ -185,8 +170,4 @@ public class Hud extends Utility {
         return super.enabled();
     }
 
-    @Override
-    public HashMap<String, Value> getSettings() {
-        return settings;
-    }
 }
diff --git a/src/main/java/net/fabricmc/example/utilities/Killaura.java b/src/main/java/net/fabricmc/example/utilities/Killaura.java
index 5b01358..114ed8c 100644
--- a/src/main/java/net/fabricmc/example/utilities/Killaura.java
+++ b/src/main/java/net/fabricmc/example/utilities/Killaura.java
@@ -1,32 +1,29 @@
 package net.fabricmc.example.utilities;
 
 import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Set;
-import java.util.SortedSet;
 
 import org.lwjgl.glfw.GLFW;
 
 import net.fabricmc.example.Utility;
 import net.fabricmc.example.value.BoolValue;
-import net.fabricmc.example.value.NumberValue;
+import net.fabricmc.example.value.IntValue;
+import net.fabricmc.example.value.FloatValue;
 import net.fabricmc.example.value.Value;
 import net.minecraft.client.MinecraftClient;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.LivingEntity;
 import net.minecraft.network.packet.c2s.play.HandSwingC2SPacket;
 import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
-import net.minecraft.network.packet.s2c.play.PlayerPositionLookS2CPacket;
-import net.minecraft.network.packet.s2c.play.PlayerPositionLookS2CPacket.Flag;
 import net.minecraft.util.Hand;
 import net.minecraft.util.math.MathHelper;
 
 public class Killaura extends Utility {
-    HashMap<String, Value> settings = new HashMap<>();
 
     public Killaura() {
         super("Killaura", GLFW.GLFW_KEY_R, Category.Combat);
-        this.settings.put("Range", new NumberValue(3.4f, 1, 10));
+        this.settings.put("Range", new FloatValue(3.4f, 1f, 10f));
+        this.settings.put("MaxAngle", new IntValue(180, 1, 360));
+
         this.settings.put("HideSwing", new BoolValue(false));
         this.settings.put("Quiet", new BoolValue(true));
 
@@ -35,44 +32,52 @@ public class Killaura extends Utility {
     @Override
     public void tick() {
         MinecraftClient mc = MinecraftClient.getInstance();
-        
+
         for (Entity e : mc.world.getEntities()) {
             if (mc.player.getAttackCooldownProgress(0f) < 1) {
                 return;
             }
-            
+
             if (e instanceof LivingEntity && e != mc.player) {
-                if(((LivingEntity)e).hurtTime >= 0.1f) {
+                if (((LivingEntity) e).hurtTime >= 0.1f) {
                     return;
                 }
                 LivingEntity le = (LivingEntity) e;
-                if(le.hurtTime > 0) {
+                if (le.hurtTime > 0) {
                     return;
                 }
-                if(!le.isOnGround()) {
-                    return;
-                }
-                if (mc.player.distanceTo(le) <= ((NumberValue)this.settings.get("Range")).get()) {
-
-                    double d = le.getPos().x - mc.player.getPos().x;
-                    double e2 = le.getEyeY() - mc.player.getEyeY();
-                    double f = le.getPos().z - mc.player.getPos().z;
-                    double g = (double)MathHelper.sqrt(d * d + f * f);
-                    float pitch = MathHelper.wrapDegrees((float)(-(MathHelper.atan2(e2, g) * 57.2957763671875D)));
-                    float yaw = MathHelper.wrapDegrees((float)(MathHelper.atan2(f, d) * 57.2957763671875D) - 90.0F);
-                    if(!((BoolValue)this.settings.get("Quiet")).get()) {
+                // if(!le.isOnGround()) {
+                // return;
+                // }
+                if (mc.player.distanceTo(le) <= ((FloatValue) this.settings.get("Range")).get()) {
+
+                    float[] rotations = getRotations(le);
+                    float pitch = rotations[0];
+                    float yaw = rotations[1];
+
+                    float currentYaw = MathHelper.wrapDegrees(mc.player.yaw);
+                    float currentPitch = MathHelper.wrapDegrees(mc.player.pitch);
+
+                    float diffYaw = currentYaw - yaw;
+                    float diffPitch = currentPitch - pitch;
+
+                    float angleDiff = diffYaw * diffYaw + diffPitch * diffPitch;
+                    System.out.println(angleDiff % 360);
+                    // if (angleDiff > ((IntValue) this.settings.get("MaxAngle")).get()) {
+                    //     return;
+                    // }
+                    if (!((BoolValue) this.settings.get("Quiet")).get()) {
                         mc.player.pitch = pitch;
                         mc.player.yaw = yaw;
                     } else {
-                        // Set<Flag> s = new HashSet<Flag>();
-                        // s.add(Flag.X_ROT);
-                        mc.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.LookOnly(yaw, pitch, mc.player.isOnGround()));
+                        mc.player.networkHandler
+                                .sendPacket(new PlayerMoveC2SPacket.LookOnly(yaw, pitch, mc.player.isOnGround()));
                     }
 
                     mc.interactionManager.attackEntity(mc.player, e);
-                    if(!((BoolValue)this.settings.get("HideSwing")).get()) {
+                    if (!((BoolValue) this.settings.get("HideSwing")).get()) {
                         mc.player.swingHand(Hand.MAIN_HAND);
-                    }else {
+                    } else {
                         mc.player.networkHandler.sendPacket(new HandSwingC2SPacket(Hand.MAIN_HAND));
                     }
                 }
@@ -86,8 +91,15 @@ public class Killaura extends Utility {
         super.onDisable();
     }
 
-    @Override
-    public HashMap<String, Value> getSettings() {
-        return settings;
+
+    public static float[] getRotations(Entity le) {
+        MinecraftClient mc = MinecraftClient.getInstance();
+        double d = le.getPos().x - mc.player.getPos().x;
+        double e2 = le.getEyeY() - mc.player.getEyeY();
+        double f = le.getPos().z - mc.player.getPos().z;
+        double g = (double) MathHelper.sqrt(d * d + f * f);
+        float pitch = MathHelper.wrapDegrees((float) (-(MathHelper.atan2(e2, g) * 57.2957763671875D)));
+        float yaw = MathHelper.wrapDegrees((float) (MathHelper.atan2(f, d) * 57.2957763671875D) - 90.0F);
+        return new float[] { pitch, yaw };
     }
 }
diff --git a/src/main/java/net/fabricmc/example/utilities/TestingUtil.java b/src/main/java/net/fabricmc/example/utilities/TestingUtil.java
index 6b29c10..7bf0ce1 100644
--- a/src/main/java/net/fabricmc/example/utilities/TestingUtil.java
+++ b/src/main/java/net/fabricmc/example/utilities/TestingUtil.java
@@ -1,7 +1,6 @@
 package net.fabricmc.example.utilities;
 
 import java.util.HashMap;
-import java.util.Vector;
 
 import org.lwjgl.glfw.GLFW;
 // import org.lwjgl.util.vector.Matrix3f;
@@ -11,31 +10,18 @@ import org.lwjgl.glfw.GLFW;
 import net.fabricmc.example.Utility;
 import net.fabricmc.example.value.BoolValue;
 import net.fabricmc.example.value.ModeValue;
-import net.fabricmc.example.value.NumberValue;
+import net.fabricmc.example.value.FloatValue;
 import net.fabricmc.example.value.Value;
 import net.minecraft.client.MinecraftClient;
-import net.minecraft.client.gui.DrawableHelper;
 import net.minecraft.client.util.math.MatrixStack;
-import net.minecraft.client.util.math.Vector3d;
-import net.minecraft.client.util.math.Vector3f;
-import net.minecraft.entity.Entity;
-import net.minecraft.entity.passive.VillagerEntity;
-import net.minecraft.entity.player.PlayerEntity;
-import net.minecraft.item.Item;
-import net.minecraft.util.math.BlockPos;
-import net.minecraft.util.math.MathHelper;
-import net.minecraft.util.math.Matrix4f;
-import net.minecraft.util.math.Vec2f;
-import net.minecraft.util.math.Vec3d;
 
 public class TestingUtil extends Utility {
-    HashMap<String, Value> settings = new HashMap<>();
 
     public TestingUtil() {
         super("TestingUtil", GLFW.GLFW_KEY_C, Category.Movement);
-        this.settings.put("SomeNumber1", new NumberValue(5, 1, 10));
-        this.settings.put("SomeNumber2", new NumberValue(5, 1, 10));
-        this.settings.put("SomeNumber3", new NumberValue(5, 1, 10));
+        this.settings.put("SomeNumber1", new FloatValue(5, 1, 10));
+        this.settings.put("SomeNumber2", new FloatValue(5, 1, 10));
+        this.settings.put("SomeNumber3", new FloatValue(5, 1, 10));
         this.settings.put("SomeBool1", new BoolValue(true));
         this.settings.put("SomeBool2", new BoolValue(false));
         this.settings.put("SomeBool3", new BoolValue(true));
@@ -71,10 +57,6 @@ public class TestingUtil extends Utility {
         super.tick();
     }
 
-    @Override
-    public HashMap<String, Value> getSettings() {
-        return settings;
-    }
 }
 
 /*
diff --git a/src/main/java/net/fabricmc/example/utilities/TriggerBot.java b/src/main/java/net/fabricmc/example/utilities/TriggerBot.java
index adf40bf..d450fff 100644
--- a/src/main/java/net/fabricmc/example/utilities/TriggerBot.java
+++ b/src/main/java/net/fabricmc/example/utilities/TriggerBot.java
@@ -1,44 +1,22 @@
 package net.fabricmc.example.utilities;
 
 import java.util.HashMap;
-import java.util.Vector;
-
 import org.lwjgl.glfw.GLFW;
-// import org.lwjgl.util.vector.Matrix3f;
-// import org.lwjgl.util.vector.Vector2f;
-// import org.lwjgl.util.vector.Vector3f;
-
 import net.fabricmc.example.Client;
 import net.fabricmc.example.Utility;
 import net.fabricmc.example.value.BoolValue;
-import net.fabricmc.example.value.ModeValue;
-import net.fabricmc.example.value.NumberValue;
 import net.fabricmc.example.value.Value;
 import net.minecraft.client.MinecraftClient;
 import net.minecraft.client.gui.DrawableHelper;
 import net.minecraft.client.util.math.MatrixStack;
-import net.minecraft.client.util.math.Vector3d;
-import net.minecraft.client.util.math.Vector3f;
-import net.minecraft.entity.Entity;
 import net.minecraft.entity.LivingEntity;
-import net.minecraft.entity.passive.VillagerEntity;
-import net.minecraft.entity.player.PlayerEntity;
-import net.minecraft.item.Item;
 import net.minecraft.network.packet.c2s.play.HandSwingC2SPacket;
 import net.minecraft.util.Hand;
-import net.minecraft.util.hit.HitResult;
-import net.minecraft.util.math.BlockPos;
-import net.minecraft.util.math.MathHelper;
-import net.minecraft.util.math.Matrix4f;
-import net.minecraft.util.math.Vec2f;
-import net.minecraft.util.math.Vec3d;
 
 public class TriggerBot extends Utility {
-    HashMap<String, Value> settings = new HashMap<>();
     LivingEntity e;
     public TriggerBot() {
         super("TriggerBot", GLFW.GLFW_KEY_C, Category.Combat);
-        this.settings.put("Reach", new NumberValue(3.4f, 1, 10));
         this.settings.put("HideSwing", new BoolValue(false));
 
     }
@@ -69,7 +47,6 @@ public class TriggerBot extends Utility {
     @Override
     public void tick() {
         MinecraftClient mc = MinecraftClient.getInstance();
-        float reach = ((NumberValue) this.settings.get("Reach")).get();
         // HitResult hr = mc.player.raycast(reach, 0, false);
         // if(hr.getType() == HitResult.Type.ENTITY) {
         //     hr.
@@ -89,10 +66,6 @@ public class TriggerBot extends Utility {
         super.tick();
     }
 
-    @Override
-    public HashMap<String, Value> getSettings() {
-        return settings;
-    }
 }
 
 /*
diff --git a/src/main/java/net/fabricmc/example/utilities/Velocity.java b/src/main/java/net/fabricmc/example/utilities/Velocity.java
index 21eae72..dce3103 100644
--- a/src/main/java/net/fabricmc/example/utilities/Velocity.java
+++ b/src/main/java/net/fabricmc/example/utilities/Velocity.java
@@ -1,7 +1,6 @@
 package net.fabricmc.example.utilities;
 
 import java.util.HashMap;
-import java.util.Vector;
 
 import org.lwjgl.glfw.GLFW;
 // import org.lwjgl.util.vector.Matrix3f;
@@ -9,31 +8,17 @@ import org.lwjgl.glfw.GLFW;
 // import org.lwjgl.util.vector.Vector3f;
 
 import net.fabricmc.example.Utility;
-import net.fabricmc.example.value.BoolValue;
 import net.fabricmc.example.value.ModeValue;
-import net.fabricmc.example.value.NumberValue;
+import net.fabricmc.example.value.FloatValue;
 import net.fabricmc.example.value.Value;
 import net.minecraft.client.MinecraftClient;
-import net.minecraft.client.gui.DrawableHelper;
 import net.minecraft.client.util.math.MatrixStack;
-import net.minecraft.client.util.math.Vector3d;
-import net.minecraft.client.util.math.Vector3f;
-import net.minecraft.entity.Entity;
-import net.minecraft.entity.passive.VillagerEntity;
-import net.minecraft.entity.player.PlayerEntity;
-import net.minecraft.item.Item;
-import net.minecraft.util.math.BlockPos;
-import net.minecraft.util.math.MathHelper;
-import net.minecraft.util.math.Matrix4f;
-import net.minecraft.util.math.Vec2f;
-import net.minecraft.util.math.Vec3d;
 
 public class Velocity extends Utility {
-    HashMap<String, Value> settings = new HashMap<>();
 
     public Velocity() {
         super("Velocity", GLFW.GLFW_KEY_0, Category.Combat);
-        this.settings.put("Amount", new NumberValue(85, 0, 100));
+        this.settings.put("CubecraftAmount", new FloatValue(85, 0, 100));
         this.settings.put("Mode", new ModeValue("Cubecraft", "Packet"));
     }
 
@@ -60,7 +45,7 @@ public class Velocity extends Utility {
         MinecraftClient mc = MinecraftClient.getInstance();
         if(((ModeValue)this.settings.get("Mode")).current() == "Cubecraft"){
             if(mc.player.hurtTime > 2) {
-                float amt = ((NumberValue) this.settings.get("Amount")).get();
+                float amt = ((FloatValue) this.settings.get("CubecraftAmount")).get();
                 mc.player.setVelocity(mc.player.getVelocity().multiply(amt/100));
             }
         }
diff --git a/src/main/java/net/fabricmc/example/value/NumberValue.java b/src/main/java/net/fabricmc/example/value/NumberValue.java
deleted file mode 100644
index bc751b0..0000000
--- a/src/main/java/net/fabricmc/example/value/NumberValue.java
+++ /dev/null
@@ -1,29 +0,0 @@
-package net.fabricmc.example.value;
-
-public class NumberValue extends Value {
-    float value;
-    float max;
-    float min;
-
-    public NumberValue(float value, float min, float max) {
-        this.value = value;
-        this.min = min;
-        this.max = max;
-    }
-
-    public float get() {
-        return this.value;
-    }
-
-    public void set(float n) {
-        this.value = n;
-    }
-
-    public float max() {
-        return this.max;
-    }
-
-    public float min() {
-        return this.min;
-    }
-}
diff --git a/src/main/resources/doug.mixins.json b/src/main/resources/doug.mixins.json
index 64ea9c1..bfeac75 100644
--- a/src/main/resources/doug.mixins.json
+++ b/src/main/resources/doug.mixins.json
@@ -14,7 +14,8 @@
     "MinecraftClientMixin",
     "Matrix4fMixin",
     "LivingEntityRendererMixin",
-    "ClientPlayNetworkHandlerMixin"
+    "ClientPlayNetworkHandlerMixin",
+    "ClientPlayerEntityMixin"
 
   ],
   "injectors": {
